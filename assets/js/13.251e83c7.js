(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{261:function(t,e,r){"use strict";r.r(e);var a=r(0),l=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"设计模式的基本原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的基本原则","aria-hidden":"true"}},[t._v("#")]),t._v(" 设计模式的基本原则")]),t._v(" "),r("ol",[r("li",[t._v("将变化的部分独立出来,进行封装,让那些不变的不易受到影响.")]),t._v(" "),r("li",[t._v("针对接口编程,而不是针对实现类.通过接口就无需知道方法实现的细节,只用根据需要调用.")]),t._v(" "),r("li",[t._v("多用组合,少用继承. 组合更具灵活性.")])]),t._v(" "),r("blockquote",[r("p",[t._v("策略模式")])]),t._v(" "),r("p",[t._v("定义调用的对象,定义对应的算法族,讲算法族分别封装起来,让算法之间可以互相替换,从而达到算法的变化独立于调用对象")])])},[],!1,null,null,null);e.default=l.exports}}]);