(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{514:function(t,a,s){"use strict";s.r(a);var r=s(4),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),s("h3",{attrs:{id:"类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),s("blockquote",[s("p",[t._v("单例模式是建造行为模式")])]),t._v(" "),s("h3",{attrs:{id:"定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),s("blockquote",[s("p",[t._v("单例就是单个实例。在java中，指的是一个类的只有一个实例对象，并且该类提供全局唯一的对外访问方法。")])]),t._v(" "),s("h3",{attrs:{id:"结构和实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结构和实现"}},[t._v("#")]),t._v(" 结构和实现")]),t._v(" "),s("p",[t._v("单例主要有单例类和调用类两个角色")]),t._v(" "),s("blockquote",[s("p",[t._v("单例类： 包含一个该类的实例（静态私有），并且可以自行创建该实例，提供对外的访问方式。\n调用类： 通过单例类提供的访问方法，进行调用该实例的类。")])]),t._v(" "),s("h4",{attrs:{id:"饿汉模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#饿汉模式"}},[t._v("#")]),t._v(" 饿汉模式")]),t._v(" "),s("p",[t._v("饿汉模式是指在单例类一开始加载就创建好该类的实例，保证其他调用类使用该单例之前就存在可用的单例。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n/**\n * 单例模式之饿汉模式\n *\n * 饿汉模式是指在类加载之初就创建该类的实例，并提供对外访问的接口\n *\n * 模式的特点是类一旦加载就创建一个单例，采用 static final关键字修饰，表示在类创建好的同时就会实例化好的，以后不会再变，所以是线程安全的。\n *\n * 但是它有一定的缺陷，那就是在一开始并不是所有的单例类都会被用到，这就导致会浪费一定的空间创建这些单例。\n */\npublic class HungrySingleton {\n\n    private static final HungrySingleton hungrySingleton = new HungrySingleton();\n\n    public static HungrySingleton getInstance(){\n        return hungrySingleton;\n    }\n\n}\n")])])]),s("h4",{attrs:{id:"懒汉模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒汉模式"}},[t._v("#")]),t._v(" 懒汉模式")]),t._v(" "),s("h4",{attrs:{id:"线程安全和不安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全和不安全"}},[t._v("#")]),t._v(" 线程安全和不安全")]),t._v(" "),s("h4",{attrs:{id:"双重枷锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双重枷锁"}},[t._v("#")]),t._v(" 双重枷锁")]),t._v(" "),s("h4",{attrs:{id:"静态内部类持有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态内部类持有"}},[t._v("#")]),t._v(" 静态内部类持有")]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("h3",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),s("h3",{attrs:{id:"扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),s("p",[t._v("volatile关键字")]),t._v(" "),s("p",[t._v("synchronized关键字")])])}),[],!1,null,null,null);a.default=e.exports}}]);